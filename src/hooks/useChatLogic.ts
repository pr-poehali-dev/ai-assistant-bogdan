import { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import * as pdfjsLib from 'pdfjs-dist';
import { selectBestModel, getModelDisplayName } from '@/lib/modelSelector';

pdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js`;

type AIModel = 'gemini' | 'llama' | 'gigachat' | 'phi' | 'qwen' | 'mistral';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  model?: AIModel;
  attachments?: Array<{ type: 'image' | 'file' | 'audio'; url: string; name: string; duration?: number }>;
  reactions?: Array<{ emoji: string; count: number }>;
}

interface APIConfig {
  gemini: { key: string; enabled: boolean };
  llama: { key: string; enabled: boolean };
  gigachat: { key: string; enabled: boolean };
  phi: { key: string; enabled: boolean };
  qwen: { key: string; enabled: boolean };
  mistral: { key: string; enabled: boolean };
  activeModel?: AIModel;
}

interface Settings {
  temperature: number;
  max_tokens: number;
  system_prompt: string;
  context_length: number;
  auto_save: boolean;
  streaming: boolean;
  language: string;
  top_p: number;
  top_k: number;
  frequency_penalty: number;
  presence_penalty: number;
  repetition_penalty: number;
}

const modelInfo = {
  gemini: { name: '–†–µ–∂–∏–º –°–∫–æ—Ä–æ—Å—Ç—å', fullName: '–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã', color: 'from-blue-500 to-blue-600', icon: 'Zap' },
  llama: { name: '–†–µ–∂–∏–º –¢–æ—á–Ω–æ—Å—Ç—å', fullName: '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', color: 'from-purple-500 to-purple-600', icon: 'Target' },
  gigachat: { name: '–†–µ–∂–∏–º –ö—Ä–µ–∞—Ç–∏–≤', fullName: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è', color: 'from-green-500 to-green-600', icon: 'Lightbulb' },
  phi: { name: '–†–µ–∂–∏–º –ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å', fullName: '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', color: 'from-indigo-500 to-indigo-600', icon: 'Brain' },
  qwen: { name: '–†–µ–∂–∏–º –ë–∞–ª–∞–Ω—Å', fullName: '–ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞', color: 'from-orange-500 to-orange-600', icon: 'Cpu' },
  mistral: { name: '–†–µ–∂–∏–º –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', fullName: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', color: 'from-rose-500 to-rose-600', icon: 'Rocket' },
};

export function useChatLogic() {
  const { toast } = useToast();
  const [messages, setMessages] = useState<Message[]>(() => {
    const saved = localStorage.getItem('chat-history');
    return saved ? JSON.parse(saved).map((m: any) => ({ ...m, timestamp: new Date(m.timestamp) })) : [
      {
        id: '1',
        role: 'assistant',
        content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
        timestamp: new Date(),
      },
    ];
  });
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentModel, setCurrentModel] = useState<AIModel | null>(null);
  const [apiConfig, setApiConfig] = useState<APIConfig>(() => {
    const saved = localStorage.getItem('ai-config');
    return saved ? JSON.parse(saved) : {
      gemini: { key: '', enabled: true },
      llama: { key: '', enabled: true },
      gigachat: { key: '', enabled: true },
      phi: { key: '', enabled: true },
      qwen: { key: '', enabled: true },
      mistral: { key: '', enabled: true },
      activeModel: 'gemini',
    };
  });
  const [settings, setSettings] = useState<Settings>(() => {
    const saved = localStorage.getItem('ai-settings');
    return saved ? JSON.parse(saved) : {
      temperature: 0.7,
      max_tokens: 2048,
      system_prompt: '',
      context_length: 10,
      auto_save: true,
      streaming: false,
      language: 'ru',
      top_p: 0.9,
      top_k: 40,
      frequency_penalty: 0.0,
      presence_penalty: 0.0,
      repetition_penalty: 1.0,
    };
  });
  const [stats, setStats] = useState(() => {
    const saved = localStorage.getItem('ai-stats');
    return saved ? JSON.parse(saved) : {
      gemini: 0,
      llama: 0,
      gigachat: 0,
    };
  });
  const [selectedModel, setSelectedModel] = useState<AIModel | 'auto'>('auto');

  useEffect(() => {
    localStorage.setItem('ai-config', JSON.stringify(apiConfig));
  }, [apiConfig]);

  useEffect(() => {
    localStorage.setItem('chat-history', JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    localStorage.setItem('ai-settings', JSON.stringify(settings));
  }, [settings]);

  useEffect(() => {
    localStorage.setItem('ai-stats', JSON.stringify(stats));
  }, [stats]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const activeModel = apiConfig.activeModel || 'gemini';
    
    if (!apiConfig[activeModel]?.enabled || !apiConfig[activeModel]?.key) {
      toast({
        title: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
        description: `–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ${modelInfo[activeModel]?.name} –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è`,
        variant: 'destructive',
      });
      return;
    }

    const selectedAIModel = activeModel;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInput = inputMessage;
    setInputMessage('');
    setIsLoading(true);
    setCurrentModel(selectedAIModel);

    try {
      const history = messages.map(m => ({
        role: m.role,
        content: m.content
      }));

      const response = await fetch('https://functions.poehali.dev/81fdec08-160f-4043-a2da-cefa0ffbdf22', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: currentInput,
          models: apiConfig,
          history: history,
          settings: settings,
          preferredModel: selectedAIModel,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        let errorMsg = data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞';
        if (data.details && Array.isArray(data.details)) {
          const errorDetails = data.details.map((d: any) => `${d.model}: ${d.error}`).join(', ');
          errorMsg = `${errorMsg}. –î–µ—Ç–∞–ª–∏: ${errorDetails}`;
        }
        throw new Error(errorMsg);
      }

      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: data.response,
        timestamp: new Date(),
        model: data.model,
      };

      setMessages(prev => [...prev, assistantMessage]);
      setCurrentModel(data.model);

      setStats(prev => ({
        ...prev,
        [data.model]: (prev[data.model] || 0) + 1
      }));

      if (data.fallback_used) {
        toast({
          title: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ',
          description: `–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç ${modelInfo[data.model as AIModel]?.name || data.model}`,
        });
      }
    } catch (error: any) {
      let errorTitle = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      let errorDescription = error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç';
      let userFriendlyMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. ';
      
      if (error.message?.includes('timeout')) {
        errorTitle = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
        errorDescription = '–°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.';
        userFriendlyMessage = '‚è±Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message?.includes('API') || error.message?.includes('key')) {
        errorTitle = '–û—à–∏–±–∫–∞ API';
        errorDescription = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö';
        userFriendlyMessage = 'üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–∫–Ω–æ–ø–∫–∞ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É) –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.';
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorTitle = '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é';
        errorDescription = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
        userFriendlyMessage = 'üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.';
      }
      
      toast({
        title: errorTitle,
        description: errorDescription,
        variant: 'destructive',
      });

      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: userFriendlyMessage,
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const clearHistory = () => {
    setMessages([{
      id: '1',
      role: 'assistant',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      timestamp: new Date(),
    }]);
    toast({
      title: '–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞',
      description: '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã',
    });
  };

  const exportChat = () => {
    const content = messages.map(m => `[${m.timestamp.toLocaleString()}] ${m.role === 'user' ? '–í—ã' : '–ë–æ–≥–¥–∞–Ω'}: ${m.content}`).join('\n\n');
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `chat-${new Date().toISOString()}.txt`;
    a.click();
    toast({
      title: '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
      description: '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª',
    });
  };

  const copyMessageToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({
      title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
      description: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞',
    });
  };

  const regenerateResponse = async (messageId: string) => {
    const messageIndex = messages.findIndex(m => m.id === messageId);
    if (messageIndex === -1 || messageIndex === 0) return;
    
    const previousUserMessage = messages[messageIndex - 1];
    if (previousUserMessage.role !== 'user') return;

    setMessages(prev => prev.slice(0, messageIndex));
    setInputMessage(previousUserMessage.content);
    await handleSendMessage();
  };

  const addReaction = (messageId: string, emoji: string) => {
    setMessages(prev => prev.map(m => {
      if (m.id === messageId) {
        const reactions = m.reactions || [];
        const existing = reactions.find(r => r.emoji === emoji);
        if (existing) {
          existing.count++;
        } else {
          reactions.push({ emoji, count: 1 });
        }
        return { ...m, reactions };
      }
      return m;
    }));
  };

  const extractTextFromPDF = async (file: File): Promise<string> => {
    try {
      const arrayBuffer = await file.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      let fullText = '';

      for (let i = 1; i <= pdf.numPages; i++) {
        const page = await pdf.getPage(i);
        const textContent = await page.getTextContent();
        const pageText = textContent.items.map((item: any) => item.str).join(' ');
        fullText += pageText + '\n';
      }

      return fullText.trim();
    } catch (error) {
      console.error('PDF extraction error:', error);
      return '';
    }
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files || files.length === 0) return;

    const fileArray = Array.from(files);
    const totalFiles = fileArray.length;
    const newAttachments: Array<{ type: 'image' | 'file'; url: string; name: string }> = [];
    const extractedTexts: string[] = [];

    for (const file of fileArray) {
      const reader = new FileReader();
      
      const fileData = await new Promise<{ url: string; text?: string }>((resolve) => {
        reader.onload = async (e) => {
          const url = e.target?.result as string;
          let extractedText = '';
          
          if (file.type === 'application/pdf') {
            toast({
              title: 'üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é PDF...',
              description: `–ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ ${file.name}`,
            });
            extractedText = await extractTextFromPDF(file);
          } else if (file.type.startsWith('image/')) {
            toast({
              title: 'üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...',
              description: `–û—Ç–ø—Ä–∞–≤–ª—è—é ${file.name} –Ω–∞ –∞–Ω–∞–ª–∏–∑`,
            });
            extractedText = `üñºÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "${file.name}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–µ—Ç–∞–ª–∏.`;
          }
          
          resolve({ url, text: extractedText });
        };
        reader.readAsDataURL(file);
      });

      const attachment = {
        type: file.type.startsWith('image/') ? 'image' as const : 'file' as const,
        url: fileData.url,
        name: file.name,
      };
      newAttachments.push(attachment);
      
      if (fileData.text) {
        extractedTexts.push(fileData.text);
      }
    }

    const userContent = inputMessage.trim() || '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã';
    const displayContent = userContent;
    let fullContentForAI = userContent;
    
    if (extractedTexts.length > 0) {
      fullContentForAI = `${userContent}\n\n${extractedTexts.join('\n\n---\n\n')}`;
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: displayContent,
      timestamp: new Date(),
      attachments: newAttachments,
    };
    
    setMessages(prev => [...prev, userMessage]);
    const savedInput = fullContentForAI;
    setInputMessage('');
    setIsLoading(true);
    
    toast({
      title: `–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã`,
      description: extractedTexts.length > 0 
        ? `PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –ò–ò...` 
        : `–î–æ–±–∞–≤–ª–µ–Ω–æ: ${totalFiles} —Ñ–∞–π–ª(–æ–≤)`,
    });

    if (extractedTexts.length > 0) {
      const enabledModels = Object.entries(apiConfig).filter(([_, config]) => config.enabled && config.key);
      
      if (enabledModels.length === 0) {
        toast({
          title: '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
          description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
          variant: 'destructive',
        });
        setIsLoading(false);
        event.target.value = '';
        return;
      }

      try {
        const history = messages.map(m => ({
          role: m.role,
          content: m.content
        }));

        const response = await fetch('https://functions.poehali.dev/81fdec08-160f-4043-a2da-cefa0ffbdf22', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: savedInput,
            models: apiConfig,
            history: history,
            settings: settings,
          }),
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
        }

        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: data.response,
          timestamp: new Date(),
          model: data.model,
        };

        setMessages(prev => [...prev, assistantMessage]);
        setCurrentModel(data.model);

        setStats(prev => ({
          ...prev,
          [data.model]: (prev[data.model] || 0) + 1
        }));
      } catch (error: any) {
        toast({
          title: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
          description: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF',
          variant: 'destructive',
        });
      } finally {
        setIsLoading(false);
      }
    } else {
      setIsLoading(false);
    }
    
    event.target.value = '';
  };

  const handleVoiceMessageSend = async (audioBlob: Blob, duration: number) => {
    const reader = new FileReader();
    reader.onload = async (e) => {
      const audioUrl = e.target?.result as string;
      
      toast({
        title: '–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...',
        description: '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      });

      try {
        const recognizedText = await transcribeAudio(audioBlob);
        
        const voiceMessage: Message = {
          id: Date.now().toString(),
          role: 'user',
          content: recognizedText || 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          timestamp: new Date(),
          attachments: [{
            type: 'audio',
            url: audioUrl,
            name: `voice-${Date.now()}.webm`,
            duration: duration,
          }],
        };
        setMessages(prev => [...prev, voiceMessage]);
        
        if (recognizedText) {
          toast({
            title: '–†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞',
            description: '–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò...',
          });
          
          setTimeout(() => {
            setInputMessage(recognizedText);
            handleSendMessage();
          }, 500);
        } else {
          toast({
            title: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            description: `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor(duration / 60)}:${(duration % 60).toString().padStart(2, '0')}`,
          });
        }
      } catch (error) {
        console.error('Transcription error:', error);
        
        const voiceMessage: Message = {
          id: Date.now().toString(),
          role: 'user',
          content: 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
          timestamp: new Date(),
          attachments: [{
            type: 'audio',
            url: audioUrl,
            name: `voice-${Date.now()}.webm`,
            duration: duration,
          }],
        };
        setMessages(prev => [...prev, voiceMessage]);
        
        toast({
          title: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å',
          description: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
          variant: 'destructive',
        });
      }
    };
    reader.readAsDataURL(audioBlob);
  };

  const transcribeAudio = async (audioBlob: Blob): Promise<string | null> => {
    try {
      const recognition = new (window.SpeechRecognition || (window as any).webkitSpeechRecognition)();
      recognition.lang = settings.language === 'ru' ? 'ru-RU' : 'en-US';
      recognition.continuous = false;
      recognition.interimResults = false;

      return new Promise((resolve, reject) => {
        const audioUrl = URL.createObjectURL(audioBlob);
        const audio = new Audio(audioUrl);
        
        recognition.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript;
          resolve(transcript);
        };

        recognition.onerror = (event: any) => {
          reject(event.error);
        };

        recognition.onend = () => {
          URL.revokeObjectURL(audioUrl);
        };

        audio.onplay = () => {
          recognition.start();
        };

        audio.play();
      });
    } catch (error) {
      console.error('Speech recognition not supported:', error);
      return null;
    }
  };

  const setActiveModel = (model: AIModel) => {
    setApiConfig(prev => ({ ...prev, activeModel: model }));
  };

  return {
    messages,
    setMessages,
    inputMessage,
    setInputMessage,
    isLoading,
    currentModel,
    apiConfig,
    setApiConfig,
    settings,
    setSettings,
    stats,
    setStats,
    selectedModel,
    setSelectedModel,
    handleSendMessage,
    clearHistory,
    exportChat,
    copyMessageToClipboard,
    regenerateResponse,
    addReaction,
    handleFileUpload,
    handleVoiceMessageSend,
    setActiveModel,
  };
}