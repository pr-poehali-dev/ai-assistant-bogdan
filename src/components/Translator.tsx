import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

const VOICE_LANGUAGES = [
  { code: 'ru-RU', name: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π' },
  { code: 'en-US', name: 'üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π' },
  { code: 'es-ES', name: 'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π' },
  { code: 'fr-FR', name: 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π' },
  { code: 'de-DE', name: 'üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π' },
  { code: 'it-IT', name: 'üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π' },
  { code: 'pt-PT', name: 'üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π' },
  { code: 'zh-CN', name: 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π' },
  { code: 'ja-JP', name: 'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π' },
  { code: 'ko-KR', name: 'üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∏–π' },
];

const LANGUAGES = [
  { code: 'en', name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', flag: 'üá¨üáß' },
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  { code: 'es', name: '–ò—Å–ø–∞–Ω—Å–∫–∏–π', flag: 'üá™üá∏' },
  { code: 'fr', name: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', flag: 'üá´üá∑' },
  { code: 'de', name: '–ù–µ–º–µ—Ü–∫–∏–π', flag: 'üá©üá™' },
  { code: 'it', name: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', flag: 'üáÆüáπ' },
  { code: 'pt', name: '–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π', flag: 'üáµüáπ' },
  { code: 'zh', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π', flag: 'üá®üá≥' },
  { code: 'ja', name: '–Ø–ø–æ–Ω—Å–∫–∏–π', flag: 'üáØüáµ' },
  { code: 'ko', name: '–ö–æ—Ä–µ–π—Å–∫–∏–π', flag: 'üá∞üá∑' },
  { code: 'ar', name: '–ê—Ä–∞–±—Å–∫–∏–π', flag: 'üá∏üá¶' },
  { code: 'hi', name: '–•–∏–Ω–¥–∏', flag: 'üáÆüá≥' },
  { code: 'tr', name: '–¢—É—Ä–µ—Ü–∫–∏–π', flag: 'üáπüá∑' },
  { code: 'pl', name: '–ü–æ–ª—å—Å–∫–∏–π', flag: 'üáµüá±' },
  { code: 'uk', name: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', flag: 'üá∫üá¶' },
  { code: 'nl', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π', flag: 'üá≥üá±' },
  { code: 'sv', name: '–®–≤–µ–¥—Å–∫–∏–π', flag: 'üá∏üá™' },
  { code: 'fi', name: '–§–∏–Ω—Å–∫–∏–π', flag: 'üá´üáÆ' },
  { code: 'da', name: '–î–∞—Ç—Å–∫–∏–π', flag: 'üá©üá∞' },
  { code: 'no', name: '–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π', flag: 'üá≥üá¥' },
  { code: 'cs', name: '–ß–µ—à—Å–∫–∏–π', flag: 'üá®üáø' },
  { code: 'el', name: '–ì—Ä–µ—á–µ—Å–∫–∏–π', flag: 'üá¨üá∑' },
  { code: 'he', name: '–ò–≤—Ä–∏—Ç', flag: 'üáÆüá±' },
  { code: 'th', name: '–¢–∞–π—Å–∫–∏–π', flag: 'üáπüá≠' },
  { code: 'vi', name: '–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π', flag: 'üáªüá≥' },
  { code: 'id', name: '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π', flag: 'üáÆüá©' },
  { code: 'ms', name: '–ú–∞–ª–∞–π—Å–∫–∏–π', flag: 'üá≤üáæ' },
  { code: 'fa', name: '–ü–µ—Ä—Å–∏–¥—Å–∫–∏–π', flag: 'üáÆüá∑' },
  { code: 'bn', name: '–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–π', flag: 'üáßüá©' },
  { code: 'ro', name: '–†—É–º—ã–Ω—Å–∫–∏–π', flag: 'üá∑üá¥' },
  { code: 'hu', name: '–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π', flag: 'üá≠üá∫' },
  { code: 'sk', name: '–°–ª–æ–≤–∞—Ü–∫–∏–π', flag: 'üá∏üá∞' },
  { code: 'bg', name: '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π', flag: 'üáßüá¨' },
  { code: 'hr', name: '–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π', flag: 'üá≠üá∑' },
  { code: 'sr', name: '–°–µ—Ä–±—Å–∫–∏–π', flag: 'üá∑üá∏' },
  { code: 'sl', name: '–°–ª–æ–≤–µ–Ω—Å–∫–∏–π', flag: 'üá∏üáÆ' },
  { code: 'lt', name: '–õ–∏—Ç–æ–≤—Å–∫–∏–π', flag: 'üá±üáπ' },
  { code: 'lv', name: '–õ–∞—Ç—ã—à—Å–∫–∏–π', flag: 'üá±üáª' },
  { code: 'et', name: '–≠—Å—Ç–æ–Ω—Å–∫–∏–π', flag: 'üá™üá™' },
  { code: 'is', name: '–ò—Å–ª–∞–Ω–¥—Å–∫–∏–π', flag: 'üáÆüá∏' },
  { code: 'ga', name: '–ò—Ä–ª–∞–Ω–¥—Å–∫–∏–π', flag: 'üáÆüá™' },
  { code: 'mt', name: '–ú–∞–ª—å—Ç–∏–π—Å–∫–∏–π', flag: 'üá≤üáπ' },
  { code: 'sq', name: '–ê–ª–±–∞–Ω—Å–∫–∏–π', flag: 'üá¶üá±' },
  { code: 'mk', name: '–ú–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π', flag: 'üá≤üá∞' },
  { code: 'be', name: '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π', flag: 'üáßüáæ' },
  { code: 'kk', name: '–ö–∞–∑–∞—Ö—Å–∫–∏–π', flag: 'üá∞üáø' },
  { code: 'uz', name: '–£–∑–±–µ–∫—Å–∫–∏–π', flag: 'üá∫üáø' },
  { code: 'hy', name: '–ê—Ä–º—è–Ω—Å–∫–∏–π', flag: 'üá¶üá≤' },
  { code: 'ka', name: '–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π', flag: 'üá¨üá™' },
  { code: 'az', name: '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π', flag: 'üá¶üáø' },
  { code: 'ur', name: '–£—Ä–¥—É', flag: 'üáµüá∞' },
  { code: 'ne', name: '–ù–µ–ø–∞–ª—å—Å–∫–∏–π', flag: 'üá≥üáµ' },
  { code: 'si', name: '–°–∏–Ω–≥–∞–ª—å—Å–∫–∏–π', flag: 'üá±üá∞' },
  { code: 'km', name: '–ö—Ö–º–µ—Ä—Å–∫–∏–π', flag: 'üá∞üá≠' },
  { code: 'lo', name: '–õ–∞–æ—Å—Å–∫–∏–π', flag: 'üá±üá¶' },
  { code: 'my', name: '–ë–∏—Ä–º–∞–Ω—Å–∫–∏–π', flag: 'üá≤üá≤' },
  { code: 'mn', name: '–ú–æ–Ω–≥–æ–ª—å—Å–∫–∏–π', flag: 'üá≤üá≥' },
  { code: 'tl', name: '–¢–∞–≥–∞–ª—å—Å–∫–∏–π', flag: 'üáµüá≠' },
  { code: 'sw', name: '–°—É–∞—Ö–∏–ª–∏', flag: 'üáπüáø' },
  { code: 'am', name: '–ê–º—Ö–∞—Ä—Å–∫–∏–π', flag: 'üá™üáπ' },
  { code: 'af', name: '–ê—Ñ—Ä–∏–∫–∞–∞–Ω—Å', flag: 'üáøüá¶' },
  { code: 'zu', name: '–ó—É–ª—É', flag: 'üáøüá¶' },
  { code: 'xh', name: '–ö–æ—Å–∞', flag: 'üáøüá¶' },
  { code: 'ig', name: '–ò–≥–±–æ', flag: 'üá≥üá¨' },
  { code: 'yo', name: '–ô–æ—Ä—É–±–∞', flag: 'üá≥üá¨' },
  { code: 'ha', name: '–•–∞—É—Å–∞', flag: 'üá≥üá¨' },
];

export default function Translator() {
  const { toast } = useToast();
  const [sourceText, setSourceText] = useState('');
  const [translatedText, setTranslatedText] = useState('');
  const [sourceLang, setSourceLang] = useState('en');
  const [targetLang, setTargetLang] = useState('ru');
  const [isTranslating, setIsTranslating] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [sourceVoiceLang, setSourceVoiceLang] = useState('en-US');
  const [targetVoiceLang, setTargetVoiceLang] = useState('ru-RU');

  const handleTranslate = async () => {
    if (!sourceText.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞',
        variant: 'destructive',
      });
      return;
    }

    setIsTranslating(true);
    try {
      let translated = '';
      
      try {
        const googleResponse = await fetch('https://translate.googleapis.com/translate_a/single?client=gtx&sl=' + sourceLang + '&tl=' + targetLang + '&dt=t&q=' + encodeURIComponent(sourceText));
        const googleData = await googleResponse.json();
        translated = googleData[0].map((item: any) => item[0]).join('');
      } catch (googleError) {
        const myMemoryResponse = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(sourceText)}&langpair=${sourceLang}|${targetLang}`);
        const myMemoryData = await myMemoryResponse.json();
        
        if (myMemoryData.responseStatus === 200) {
          translated = myMemoryData.responseData.translatedText;
        } else {
          throw new Error('–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        }
      }
      
      setTranslatedText(translated);
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞',
        description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
        variant: 'destructive',
      });
    } finally {
      setIsTranslating(false);
    }
  };

  const handleSpeak = (text: string, lang: string) => {
    if (!text.trim()) return;
    
    setIsSpeaking(true);
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = lang;
    utterance.onend = () => setIsSpeaking(false);
    window.speechSynthesis.speak(utterance);
  };

  const swapLanguages = () => {
    setSourceLang(targetLang);
    setTargetLang(sourceLang);
    setSourceText(translatedText);
    setTranslatedText(sourceText);
  };

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      <Card className="p-8 bg-white/90 backdrop-blur-sm border-0 shadow-xl">
        <div className="flex items-center gap-4 mb-6">
          <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
            <Icon name="Languages" size={32} className="text-white" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-slate-800">–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫</h1>
            <p className="text-slate-600">–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ 30+ —è–∑—ã–∫–æ–≤ —Å –æ–∑–≤—É—á–∫–æ–π</p>
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Select value={sourceLang} onValueChange={setSourceLang}>
                <SelectTrigger className="w-full">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="max-h-60">
                  {LANGUAGES.map(lang => (
                    <SelectItem key={lang.code} value={lang.code}>
                      {lang.flag} {lang.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Button
                variant="ghost"
                size="icon"
                onClick={swapLanguages}
                className="mx-2"
              >
                <Icon name="ArrowLeftRight" size={20} />
              </Button>
            </div>

            <Textarea
              value={sourceText}
              onChange={(e) => setSourceText(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç..."
              className="min-h-[300px] text-base resize-none"
            />

            <div className="flex gap-2">
              <Button
                onClick={handleTranslate}
                disabled={isTranslating}
                className="flex-1 h-12 gap-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
              >
                {isTranslating ? (
                  <>
                    <Icon name="Loader2" size={20} className="animate-spin" />
                    –ü–µ—Ä–µ–≤–æ–¥...
                  </>
                ) : (
                  <>
                    <Icon name="Languages" size={20} />
                    –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
                  </>
                )}
              </Button>
              <div className="flex gap-2 items-center">
                <Select value={sourceVoiceLang} onValueChange={setSourceVoiceLang}>
                  <SelectTrigger className="h-12 w-[140px]">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {VOICE_LANGUAGES.map(lang => (
                      <SelectItem key={lang.code} value={lang.code}>
                        {lang.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => handleSpeak(sourceText, sourceVoiceLang)}
                  disabled={!sourceText.trim() || isSpeaking}
                  className="h-12 w-12"
                >
                  <Icon name="Volume2" size={20} />
                </Button>
              </div>
            </div>
          </div>

          <div className="space-y-4">
            <Select value={targetLang} onValueChange={setTargetLang}>
              <SelectTrigger className="w-full">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="max-h-60">
                {LANGUAGES.map(lang => (
                  <SelectItem key={lang.code} value={lang.code}>
                    {lang.flag} {lang.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Textarea
              value={translatedText}
              readOnly
              placeholder="–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å..."
              className="min-h-[300px] text-base resize-none bg-slate-50"
            />

            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={() => {
                  navigator.clipboard.writeText(translatedText);
                  toast({ title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' });
                }}
                disabled={!translatedText}
                className="flex-1 h-12 gap-2"
              >
                <Icon name="Copy" size={20} />
                –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
              </Button>
              <div className="flex gap-2 items-center">
                <Select value={targetVoiceLang} onValueChange={setTargetVoiceLang}>
                  <SelectTrigger className="h-12 w-[140px]">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {VOICE_LANGUAGES.map(lang => (
                      <SelectItem key={lang.code} value={lang.code}>
                        {lang.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => handleSpeak(translatedText, targetVoiceLang)}
                  disabled={!translatedText.trim() || isSpeaking}
                  className="h-12 w-12"
                >
                  <Icon name="Volume2" size={20} />
                </Button>
              </div>
            </div>
          </div>
        </div>
      </Card>

      <Card className="p-6 bg-gradient-to-br from-blue-50 to-purple-50 border-blue-200">
        <h3 className="font-bold text-lg mb-3 flex items-center gap-2">
          <Icon name="Info" size={20} className="text-blue-600" />
          –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
        </h3>
        <ul className="space-y-2 text-slate-700">
          <li className="flex items-start gap-2">
            <Icon name="Check" size={18} className="text-green-600 mt-0.5" />
            <span>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 67 —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞</span>
          </li>
          <li className="flex items-start gap-2">
            <Icon name="Check" size={18} className="text-green-600 mt-0.5" />
            <span>–û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º</span>
          </li>
          <li className="flex items-start gap-2">
            <Icon name="Check" size={18} className="text-green-600 mt-0.5" />
            <span>–ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π</span>
          </li>
          <li className="flex items-start gap-2">
            <Icon name="Check" size={18} className="text-green-600 mt-0.5" />
            <span>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</span>
          </li>
        </ul>
      </Card>
    </div>
  );
}